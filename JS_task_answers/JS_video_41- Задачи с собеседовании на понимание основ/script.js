 'use strict';
 
  
 // 1. Какое будет выведено значение: let x = 5; alert( x++ ); ?
/*
 let x = 5;
 alert ( x++);  // 5 - Выведет исходное число 

 let y = 5;
 alert (++y);  // 6 - Сперва добавит 1
*/
 // 2. Чему равно такое выражение: [ ] + false - null + true ?

 [] + false - null + true   // true

 //console.log([] + false);

 //Пустой массив [] можно заменить на пустую строку. Когда пустую строку слладываем с чем-то, то получаем строку. 

 // но 
 console.log([] + false); // false

 // Обернем в typeof(), чтобы убедиться, что это строка
console.log(typeof([] + false)); // String
 
//От полученной строки попыtаемся отнять null
// При выполнении не математических операций получаем NaN

console.log([] + false - null); // NaN
console.log(NaN + false); // NaN

// 3. Что выведет этот код: let y = 1; let x = y = 2; alert(x); ?

/*
let y = 1;
let x = y = 2;
alert(x); // 2
*/

// 4. Чему равна сумма [] + 1 + 2?

//Пустой массив превращается в пустую строку
 //Дальше конкатенируем с 1 и получаем 1, затем конкатенируем с 2, получаем 12. Это не сложение  - чтобы получить 3. 1+2 - не сложение, а конкаенация

console.log([]+ 1 + 2); // 12


// 5. Что выведет этот код: alert( &quot;1&quot;[0] )?

//Что выведет этот код: alert( &quot;1&quot;[0] )?

alert("1" [0]); // 1


// 6. Чему равно (2 && 1 && null && 0 && undefined) ?

// Оператор && всегда запинается на лжи 
// 2 и 1  -  это правдивые выражения, после чего идет null. Код запнается на лжи и остановится на null

console.log(2 && 1 && null && 0 && undefined); // null

// 7. Есть ли разница между выражениями? !!( a && b ) и ( a &&  b)?
 //!! знаки превращают следующее выражение в булиновое, поэтому булиновое значение не будет равно к ( 1 && 2))
 // a, b меняем на 1  и 2

  console.log( !!( 1 && 2 ) === ( 1 && 2)); //false


  // 8. Что выведет этот код: alert( null || 2  && 3 || 4 ); ?
// Оператор || запинается на правде
// Когда оба логические  операторы равны возращается последнее значение т.е. 3

       // сравниваем 2 && 3 - будет 3  
  //затем сравниваем null с 3. Null -то не правда и запинается на правде, получим 3
 // затем сравниваем 3 || 4
  alert( null || 2  && 3 || 4 ); // 3 - Так как || запинается на правде
 

  // 9. a = [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b ?

  // Это разные храниища информации  (а и b переменные) и не важно, что они похожи. Значит они не равны
  const a = [1, 2, 3];
  const b = [1, 2, 3];

console.log(a == b); // false

// 10. Что выведет этот код: alert( +"Infinity"); 
// Тип данных чисо, так как стои унарный +, но выведет текст Infinity, так как просто спрашивается в вопросе  Что выведет этот код?
alert( +"Infinity"); //Infinity

// 11. Верно ли сравнение:"Ёжик"  > "яблоко"?

//Сравниваем строки. Посимвольное сравнение. ПОсмотреть в таблиц символьного юникода. Буква я последняя в алфавите, буква Ё - в верхнем регистре

console.log("Ёжик"  > "яблоко"); // фалсе

//12. Чему равно 0 || &quot;&quot; || 2 || undefined || true || falsе ?

//0 - это false, "" - это false, 2 - это правда , значит ИЛИ (||)запинается на правде и вернет 2
console.log(0 || "" || 2 || undefined || true || falsе  );// 2

console.log(0 || undefined || true || falsе  ); // true